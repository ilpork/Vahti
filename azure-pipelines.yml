trigger:
- master

variables:
  buildConfiguration: 'Release'

jobs:
- job: NetCore
  displayName: 'Build .NET Core projects'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: DotNetCoreCLI@2
    displayName: Build Vahti.Collector
    inputs:
      command: build
      projects: 'src/Vahti.Collector/**/*.csproj'
      arguments: '--configuration Release'
  - task: DotNetCoreCLI@2
    displayName: Build Vahti.DataBroker
    inputs:
      command: build
      projects: 'src/Vahti.DataBroker/**/*.csproj'
      arguments: '--configuration Release'
  - task: DotNetCoreCLI@2
    displayName: Build Vahti.Mqtt
    inputs:
      command: build
      projects: 'src/Vahti.Mqtt/**/*.csproj'
      arguments: '--configuration Release'
  - task: DotNetCoreCLI@2
    displayName: Build Vahti.Shared
    inputs:
      command: build
      projects: 'src/Vahti.Shared/**/*.csproj'
      arguments: '--configuration Release'
  - task: DotNetCoreCLI@2
    displayName: Build Vahti.Server
    inputs:
      command: build
      projects: 'src/Vahti.Server/**/*.csproj'
      arguments: '--configuration Release'
  - task: DotNetCoreCLI@2
    displayName: Run tests
    inputs:
      command: test      
      projects: '**/*Test/*.csproj'
      arguments: '--configuration $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Publish Vahti.Server (linux-arm)
    inputs:
      command: publish
      publishWebProjects: false
      projects: 'src/Vahti.Server/Vahti.Server.csproj'
      arguments: '--configuration $(BuildConfiguration) -r linux-arm --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: true
  - task: CmdLine@2
    displayName: Rename Zip
    inputs:
      script: 'mv Vahti.Server.zip Vahti.Server-linux-arm.zip' 
      workingDirectory: '$(Build.ArtifactStagingDirectory)' 
  - task: DotNetCoreCLI@2
    displayName: Publish Vahti.Server (linux-x64)
    inputs:
      command: publish
      publishWebProjects: false
      projects: 'src/Vahti.Server/Vahti.Server.csproj'
      arguments: '--configuration $(BuildConfiguration) -r linux-x64 --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: true
  - task: CmdLine@2
    displayName: Rename Zip
    inputs:
      script: 'mv Vahti.Server.zip Vahti.Server-linux-x64.zip' 
      workingDirectory: '$(Build.ArtifactStagingDirectory)' 
  - task: DotNetCoreCLI@2
    displayName: Publish Vahti.Server (win10-x64)
    inputs:
      command: publish
      publishWebProjects: false
      projects: 'src/Vahti.Server/Vahti.Server.csproj'
      arguments: '--configuration $(BuildConfiguration) -r win10-x64 --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: true
  - task: CmdLine@2
    displayName: Rename Zip
    inputs:
      script: 'mv Vahti.Server.zip Vahti.Server-win10-x64.zip' 
      workingDirectory: '$(Build.ArtifactStagingDirectory)' 
  - task: PublishBuildArtifacts@1
    displayName: Publish Vahti.Server build artifacts
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: 'Vahti.Server'

- job: Mobile
  displayName: 'Build mobile apps'
  pool:
    vmImage: 'macos-latest'

  variables:
    outputDirectory: '$(build.binariesDirectory)/$(buildConfiguration)'
    KeystorePwd: $(KeystorePassword)

  steps:
  - task: NuGetToolInstaller@1
    displayName: Get NuGet tool

  - task: NuGetCommand@2
    displayName: Restore NuGet packages
    inputs:
      restoreSolution: '**/*.sln'
  - task: CmdLine@2
    displayName: Create google-services.json for Android project
    inputs:
      script: 'cp google-services.template.json google-services.json' 
      workingDirectory: 'src/Vahti.Mobile/Vahti.Mobile.Android'
  - task: CmdLine@2
    displayName: Create App.config
    inputs:
      script: 'cp App.template.config App.config' 
      workingDirectory: 'src/Vahti.Mobile/Vahti.Mobile.Forms'      
  - task: CmdLine@2
    displayName: XA5104 Workaround
    inputs:
      script: '${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529"'
  - task: XamarinAndroid@1
    displayName: Build Android app
    inputs:
      projectFile: 'src/Vahti.Mobile/Vahti.Mobile.Android/Vahti.Mobile.Android.csproj'
      outputDirectory: '$(outputDirectory)'
      configuration: '$(buildConfiguration)'
      createAppPackage: true
  - task: DownloadSecureFile@1
    displayName: Download keystore file
    inputs:
      secureFile: 'ilpork.keystore'
  - task: AndroidSigning@3
    displayName: Sign APK
    inputs:
      apkFiles: '**/*.apk'
      apksignerKeystoreFile: 'ilpork.keystore'
      apksignerKeystorePassword: $(keystorePwd)
      apksignerKeystoreAlias: 'ilpork'
      apksignerKeyPassword: $(keystorePwd)
  - task: CopyFiles@2
    displayName: Copy APK files
    inputs:
      SourceFolder: $(Build.SourcesDirectory)
      contents: '**/*.apk'
      targetFolder: '$(build.artifactStagingDirectory)'
      overWrite: true
  - task: PublishBuildArtifacts@1
    displayName: Publish APK
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'apk'      
  - task: CmdLine@2
    inputs:
      script: '/bin/bash -c "sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh 6_12_12"'
  - task: CmdLine@2
    inputs:
      script: '/bin/bash -c "sudo xcode-select --switch /Applications/Xcode_13.2.1.app/Contents/Developer"'
  - task: XamariniOS@2
    displayName: Build iOS app
    inputs:
      solutionFile: '**/*iOS.csproj'
      configuration: 'Release'
      buildForSimulator: true
      packageApp: false

